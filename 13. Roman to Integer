import java.util.Hashtable; //因為leetcode裡面只支援hashtable
class Solution {
    public int romanToInt(String s) {
        int res = 0;
        Hashtable<String, Integer> map = new Hashtable<String, Integer>();
        // Hashmap<String,Integer> map = new Hashmap<String,Integer>();
        map.put("IV",4);      //建立字典
        map.put("IX",9);
        map.put("XL",40);
        map.put("XC",90);
        map.put("CD",400);
        map.put("CM",900);
        map.put("I",1);
        map.put("V",5);
        map.put("X",10);
        map.put("L",50);
        map.put("C",100);
        map.put("D",500);
        map.put("M",1000);
        int sum = 0;
        if(s==" ")return sum;   //空字串回傳0
        else if(s=="")return sum;
        else{
        for(int i =0;i<s.length();i++)
        {
            // System.out.println(s.charAt(i));
            // System.out.println(map.get(s.charAt(i)));
            String word = Character.toString(s.charAt(i));  //因為建立的hashtable是String的 要把char轉string
            sum += map.get(word);
            System.out.println("i="+i);
            System.out.println("sum="+sum);
            for(int j = i;j < s.length();j++){
                String st =Character.toString(s.charAt(i)); //抓第一個字
                String nd =i<s.length()-1?Character.toString(s.charAt(j+1)):""; //有第二個字就抓 不然就回傳空字串  
                
                String combine = st+nd; //將兩個字家再一起   這裡會用這個的原因是因為substring(i,j+1)的endindex不會包含到 所以會造成只接收到一個字元
                System.out.println(combine);
                if(map.containsKey(combine)){
                    System.out.println("j="+j + "checkpoint1");
                    sum += map.get(combine);
                    sum -=map.get(word);  //若有偵測到兩個字元的key 則將一開始加第一個字元的值扣除
                    System.out.println("sum="+sum);
                    i++;
                    break;   
                }
                else{
                    System.out.println("j="+j+"checkpoint2");
                    break; 
                }
            }


        }
        }
        return sum;
     }
}
